service: alexa-battleship

frameworkVersion: ">=1.34.0 <2.0.0"

provider:
  name: aws
  profile: alexa-battleship
  runtime: python3.7
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  deploymentBucket: ${self:custom.deployment_bucket}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - lambda:GetLayerVersion
        - lambda:PublishLayerVersion
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
      Resource: "arn:aws:logs:*:*:*"

functions:
  alexa_battleship_handler:
    handler: src/alexa_battleship_handler.lambda_handler
    events:
      - alexaSkill: amzn1.ask.skill.79106311-4e5c-4ee8-a4b9-16ac35d06e96
    description: Controls Alexa battleship handler
    memorySize: 128
    timeout: 15
    environment:
      ENV: 'environment'
      CURRENT_GAMES_TABLE: ${self:custom.current_games_table}
    iamRoleStatementsName: alexa-battleship-handler-role-${self:custom.stage}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - lambda:GetLayerVersion
          - lambda:PublishLayerVersion
        Resource: "*"
      - Effect: "Allow"
        Action:
          - "logs:CreateLogGroup"
          - "logs:CreateLogStream"
          - "logs:PutLogEvents"
        Resource: "arn:aws:logs:*:*:*"
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.current_games_table}"
  

resources:
  Description: SNS Topics CloudFormation template generated by serverless framework
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.current_games_table}
          

package:
  individually: true
  exclude:
    - node_modules/**
    
custom:
  pythonRequirements:
    dockerizePip: non-linux
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  user_name: filipebarretto
  deployment_bucket: ${self:custom.account_id}-${self:service}-${self:provider.stage}
  current_games_table: ${self:custom.account_id}-${self:service}-${self:provider.stage}-current-games
  account_id: ${file(./customjs/custom-account-id.js):getAccountId}
  
  
  
plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function
  - serverless-plugin-create-deployment-bucket
  - serverless-pseudo-parameters
  